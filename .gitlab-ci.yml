image: ubuntu:24.04

variables:
  POSTGRES_DB: test_db
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  DB_HOST: postgres
  DB_NAME: test_db
  DB_USER: user
  DB_PASSWORD: password
  DB_PORT: 5432
  DB_ENGINE: django.db.backends.postgresql
  CELERY_BROKER_USER: guest
  CELERY_BROKER_PASSWORD: guest
  CELERY_BROKER_VHOST: ""
  CELERY_BROKER_HOST: rabbitmq

stages:
  - lint
  - test
  - deploy

cache:
  paths:
    - env
    - node_modules

lint_pycodestyle:
  stage: lint
  before_script:
    - apt-get update && apt-get -y install python3-virtualenv
    - virtualenv env
    - env/bin/pip install -r requirements.txt
  script:
    - env/bin/pycodestyle --config=.pycodestylerc .

lint_eslint:
  stage: lint
  before_script:
    - apt-get update && apt-get -y install curl
  script:
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash - 
    - apt-get install -y nodejs
    - npm install
    - npm run lint

test_seeddata_setup:
  stage: test
  services:
    - name: postgres:16
      alias: postgres
    - name: rabbitmq:3.12
      alias: rabbitmq
  before_script:
    - apt-get update && apt-get -y install python3-virtualenv python3-psycopg weasyprint
    - virtualenv env
    - env/bin/pip install -r requirements.txt
  script:
    - ./setup.sh dev
    - env/bin/celery -A boxes worker -l info &
    - ci/monitor-celery.sh

test_unit:
  stage: test
  services:
    - name: postgres:16
      alias: postgres
  before_script:
    - apt-get update && apt-get -y install python3-virtualenv python3-psycopg weasyprint
    - virtualenv env
    - env/bin/pip install -r requirements.txt
  script: 
    - env/bin/python3 manage.py test

deploy_staging:
  stage: deploy
  script:
    - apt-get update && apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - sleep 2
    - ssh-add <(echo $DEPLOY_PRIVATE_KEY | base64 --decode)
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n" > ~/.ssh/config
    - ssh-keyscan $STAGING_SERVER >> ~/.ssh/known_hosts
    - ssh $STAGING_USER@$STAGING_SERVER "cd /var/www/mikes-boxes && git pull && ./setup.sh update && sudo systemctl restart gunicorn.service && sudo systemctl restart celery.service && sudo systemctl restart celery-beat.service"
  only:
    - main

deploy_prod:
  stage: deploy
  script:
    - apt-get update && apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - sleep 2
    - ssh-add <(echo $DEPLOY_PRIVATE_KEY | base64 --decode)
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n" > ~/.ssh/config
    - ssh-keyscan $PROD_SERVER >> ~/.ssh/known_hosts
    - ssh $PROD_USER@$PROD_SERVER "cd /var/www/$PROD_SERVER && git pull && ./setup.sh update && sudo systemctl restart gunicorn.service && sudo systemctl restart celery.service && sudo systemctl restart celery-beat.service"
  only:
    - main
